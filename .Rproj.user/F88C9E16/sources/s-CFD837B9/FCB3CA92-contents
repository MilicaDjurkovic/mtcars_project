display_correlation_matrix <-
function(interactive = TRUE) {
    # Display the correlation matrix
    cor_matrix <- cor(mtcars_data)
    print(cor_matrix)
    corr <- round(cor_matrix, 2)
    correlation_matrix <- corrplot(corr, 
                                   type="upper", 
                                   order="hclust", 
                                   tl.col="black", 
                                   tl.srt=45)
}
box_plot <-
function(interactive = TRUE) {
    # Create box plots for each variable against 'am'
    box_plots <- lapply(names(mtcars), function(var_name) {
        ggplot(mtcars, aes(x = factor(am), y = mtcars[[var_name]])) +
            geom_boxplot() +
            ggtitle(paste("Box Plot of", var_name, "vs. am")) +
            xlab("am") +
            ylab(var_name)
    })
    # Display the box plots
    gridExtra::grid.arrange(grobs = box_plots, ncol = 3)  # Adjust ncol as needed
}
density_plot <-
function(interactive = TRUE) {
    # Create density plots for each variable against 'am'
    density_plots <- lapply(names(mtcars), function(var_name) {
        ggplot(mtcars, aes(x = mtcars[[var_name]], fill = factor(am))) +
            geom_density(alpha = 0.5) +
            ggtitle(paste("Density Plot of", var_name, "vs. am")) +
            xlab(var_name) +
            ylab("Density") +
            scale_fill_discrete(name = "am",
                                labels = c("Automatic", "Manual"))
    })
    
    
    # Display the density plots
    gridExtra::grid.arrange(grobs = density_plots, ncol = 3)  # Adjust ncol as needed
    
}
roc_frame_plot <-
function(interactive = TRUE) {
    
    binomial_linear_model <- glm(am ~ wt +  hp, 
                                 data = mtcars_data,
                                 family = "binomial")
    
    # - decision criterion
    dec_criterion <- seq(.01, .99, by = .01)
    predictions <- predict(binomial_linear_model,
                           newdata = mtcars_data,
                           type = "response")
    
    predictions_frame <- lapply(dec_criterion, function(x) {
        # - predictions
        preds <- as.numeric(predictions > x)
        preds <- data.frame(observation = mtcars_data$am,
                            prediction = preds)
        # - model accuracy
        accuracy <-
            as.numeric(preds$observation == preds$prediction)
        accuracy <- sum(accuracy) / length(accuracy)
        # - model true positive rate (hit rate)
        hit = as.numeric(preds$observation == 1 &
                             preds$prediction == 1)
        hit <- sum(hit) / sum(preds$observation == 1)
        # - model false positive rate (false alarm rate)
        fa = as.numeric(preds$observation == 0 &
                            preds$prediction == 1)
        fa <- sum(fa) / sum(preds$observation == 0)
        return(data.frame(hit, fa, accuracy, dec = x))
    })
    
    roc_frame <- Reduce(rbind, predictions_frame)
    
    # - ROC analysis
    roc_frame$diff <- roc_frame$hit - roc_frame$fa
    roc_frame$label <- ""
    roc_frame$label[which.max(roc_frame$diff)] <- "Here!"
    ggplot(data = roc_frame,
           aes(x = fa,
               y = hit,
               label = label)) +
        geom_path(color = "blue") +
        geom_abline(intercept = 0, slope = 1) +
        geom_text_repel(
            arrow = arrow(
                length = unit(0.06, "inches"),
                ends = "last",
                type = "closed"
            ),
            min.segment.length = unit(0, 'lines'),
            nudge_y = .1
        ) +
        ggtitle("ROC analysis for the Binomial Regression Model") +
        xlab("True Negative (False Alarm) Rate") + ylab("True Positive (Hit) Rate") +
        theme_bw() +
        theme(plot.title = element_text(hjust = .5)) +
        theme(panel.border = element_blank())
}
