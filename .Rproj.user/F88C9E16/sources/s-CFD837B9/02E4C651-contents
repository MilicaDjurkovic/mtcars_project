
# Load the required libraries
library(tidyverse)
library(dplyr)
library(caret)
library(rpart)
library(corrplot)
library(car)
library(ggplot2)
library(ggrepel)

# Load the mtcars dataset

data_dir <- paste0(getwd(), "/_data/")
mtcars_data <- read.csv(paste0(data_dir, "mtcars.csv"),
                        header = TRUE,
                        check.names = FALSE,
                        stringsAsFactors = FALSE)
glimpse(mtcars_data)

mtcars_data <- mtcars_data %>%
    select("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")

str(mtcars_data)

# Display basic statistics for numeric variables
summary(mtcars_data)



# Create histograms for numeric variables
par(mfrow = c(4, 3))  # Arrange plots in a 4x3 grid
for (col in colnames(mtcars)) {
    hist(mtcars[[col]], main = col, xlab = "")
}


# Display the correlation matrix
cor_matrix <- cor(mtcars_data)
print(cor_matrix)
corr <- round(cor_matrix,2)

# matrix of the p-value of the correlation
p.mat <- cor.mtest(mtcars)

col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(corr,  method="color", col=col(200),
         type="upper", order="hclust",
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # Combine with significance
         p.mat = p.mat, sig.level = 0.01, insig = "blank",
         # hide correlation coefficient on the principal diagonal
         diag=FALSE
)


# Create box plots for each variable against 'am'
box_plots <- lapply(names(mtcars), function(var_name) {
    ggplot(mtcars, aes(x = factor(am), y = mtcars[[var_name]])) +
        geom_boxplot() +
        ggtitle(paste("Box Plot of", var_name, "vs. am")) +
        xlab("am") +
        ylab(var_name)
})

# Display the box plots
gridExtra::grid.arrange(grobs = box_plots, ncol = 3)  # Adjust ncol as needed


# Create density plots for each variable against 'am'
density_plots <- lapply(names(mtcars), function(var_name) {
    ggplot(mtcars, aes(x = mtcars[[var_name]], fill = factor(am))) +
        geom_density(alpha = 0.5) +
        ggtitle(paste("Density Plot of", var_name, "vs. am")) +
        xlab(var_name) +
        ylab("Density") +
        scale_fill_discrete(name = "am", labels = c("Automatic", "Manual"))
})


# Display the density plots
gridExtra::grid.arrange(grobs = density_plots, ncol = 3)  # Adjust ncol as needed



### --- Binomial Logistic Model
binomial_linear_model <- glm(am ~ .,
                             data = mtcars_data,
                             family = "binomial")

class(binomial_linear_model)
summary(binomial_linear_model)


vif_values <- vif(binomial_linear_model)

# Ispis VIF vrednosti
print(vif_values)

binomial_linear_model <- glm(am ~ mpg + drat,
                             data = mtcars_data,
                             family = "binomial")
summary(binomial_linear_model)

vif_values <- vif(binomial_linear_model)

# - coefficients
binomial_linear_model$coefficients
coefficients(binomial_linear_model)

# - important
coefs <- exp(binomial_linear_model$coefficients)
print(coefs)

# - prediction
predictions <- predict(binomial_linear_model,
                       newdata = mtcars_data,
                       type = "response")


predictions <- as.numeric(predictions > .5)

predictions <- data.frame(observation = mtcars_data$am,
                          prediction = predictions)


# - model accuracy
accuracy <- as.numeric(predictions$observation == predictions$prediction)
accuracy <- sum(accuracy)/length(accuracy)
print(accuracy)
# - model true positive rate (hit rate)
hit = as.numeric(predictions$observation == 1 & predictions$prediction == 1)
hit <- sum(hit)/sum(predictions$observation == 1)
print(hit)
# - model false positive rate (false alarm rate)
fa = as.numeric(predictions$observation == 0 & predictions$prediction == 1)
fa <- sum(fa)/sum(predictions$observation == 0)
print(fa)

# - decision criterion
dec_criterion <- seq(.01, .99, by = .01)
predictions <- predict(binomial_linear_model,
                       newdata = mtcars_data,
                       type = "response")

predictions_frame <- lapply(dec_criterion, function(x) {
    # - predictions
    preds <- as.numeric(predictions > x)
    preds <- data.frame(observation = mtcars_data$am,
                        prediction = preds)
    # - model accuracy
    accuracy <- as.numeric(preds$observation == preds$prediction)
    accuracy <- sum(accuracy)/length(accuracy)
    # - model true positive rate (hit rate)
    hit = as.numeric(preds$observation == 1 & preds$prediction == 1)
    hit <- sum(hit)/sum(preds$observation == 1)
    # - model false positive rate (false alarm rate)
    fa = as.numeric(preds$observation == 0 & preds$prediction == 1)
    fa <- sum(fa)/sum(preds$observation == 0)
    return(
        data.frame(hit, fa, accuracy, dec = x)
    )
})

roc_frame <- Reduce(rbind, predictions_frame)

# - ROC analysis
roc_frame$diff <- roc_frame$hit - roc_frame$fa
roc_frame$label <- ""
roc_frame$label[which.max(roc_frame$diff)] <- "Here!"
ggplot(data = roc_frame,
       aes(x = fa,
           y = hit,
           label = label)) +
    geom_path(color = "blue") +
    geom_abline(intercept = 0, slope = 1) +
    geom_text_repel(arrow = arrow(length = unit(0.06, "inches"),
                                  ends = "last",
                                  type = "closed"),
                    min.segment.length = unit(0, 'lines'),
                    nudge_y = .1) +
    ggtitle("ROC analysis for the Binomial Regression Model") +
    xlab("True Negative (False Alarm) Rate") + ylab("True Positive (Hit) Rate") +
    theme_bw() +
    theme(plot.title = element_text(hjust = .5)) +
    theme(panel.border = element_blank())


### --- model diagnostics

# - model log-likelihood
logLik(binomial_linear_model)

# - model deviance
binomial_linear_model$deviance

# - model deviance residuals
deviance_residuals <- residuals(binomial_linear_model,
                                type = "deviance")
sum(deviance_residuals^2) == binomial_linear_model$deviance

# - model deviance and model log-likelihood
sum(deviance_residuals^2) == -2 * as.numeric(logLik(binomial_linear_model))

# - Akaike Information Criterion
AIC(binomial_linear_model)
binomial_linear_model$aic
k = 3 # - how many predictors?
aic = -2*as.numeric(logLik(binomial_linear_model)) + 2*k
print(aic)

# - Comparison to a Null model
# - The follows the Chi-Square Distribution
binomial_linear_model$null.deviance
binomial_linear_model$deviance
dev_diff <- binomial_linear_model$null.deviance - binomial_linear_model$deviance
print(dev_diff)
dfs <- binomial_linear_model$df.null - binomial_linear_model$df.residual
print(dfs)
pchisq(dev_diff, dfs, lower.tail = FALSE)


### --- ROC for the full model

# - decision criterion
dec_criterion <- seq(.01, .99, by = .01)
predictions <- predict(binomial_linear_model,
                       newdata = mtcars_data,
                       type = "response")
predictions_frame <- lapply(dec_criterion, function(x) {
    # - predictions
    preds <- as.numeric(predictions > x)
    preds <- data.frame(observation = mtcars_data$am,
                        prediction = preds)
    # - model accuracy
    accuracy <- as.numeric(preds$observation == preds$prediction)
    accuracy <- sum(accuracy)/length(accuracy)
    # - model true positive rate (hit rate)
    hit = as.numeric(preds$observation == 1 & preds$prediction == 1)
    hit <- sum(hit)/sum(preds$observation == 1)
    # - model false positive rate (false alarm rate)
    fa = as.numeric(preds$observation == 0 & preds$prediction == 1)
    fa <- sum(fa)/sum(preds$observation == 0)
    return(
        data.frame(hit, fa, accuracy, dec = x)
    )
})
roc_frame <- Reduce(rbind, predictions_frame)
roc_frame$diff <- roc_frame$hit - roc_frame$fa
roc_frame$label <- ""
roc_frame$label[which.max(roc_frame$diff)] <- "Here!"
ggplot(data = roc_frame,
       aes(x = fa,
           y = hit,
           label = label)) +
    geom_path(color = "red") +
    geom_abline(intercept = 0, slope = 1) +
    geom_text_repel(arrow = arrow(length = unit(0.06, "inches"),
                                  ends = "last",
                                  type = "closed"),
                    min.segment.length = unit(0, 'lines'),
                    nudge_y = .1) +
    ggtitle("ROC analysis for the Binomial Regression Model") +
    xlab("True Negative (False Alarm) Rate") + ylab("True Positive (Hit) Rate") +
    theme_bw() +
    theme(plot.title = element_text(hjust = .5)) +
    theme(panel.border = element_blank())




# Predict probabilities for the test data
tx <- predict(binomial_linear_model, newdata = mtcars_data, type = "response")

# Model evaluation (you can use appropriate metrics such as accuracy, precision, recall, F1-score)
confusion_matrix <- confusionMatrix(table(tx$am, tx$predicted_probability > 0.5))
confusion_matrix
